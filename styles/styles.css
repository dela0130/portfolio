/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}


/*  `````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````                                       

				My code begins
	
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````*/

/* To make the anchor links smooth, this is being added to the entire page. This was from: https://gomakethings.com/how-to-animate-scrolling-to-anchor-links-with-one-line-of-css/ */

html {
	scroll-behavior: smooth;

}
/* Disable smooth scrolling when users have prefers-reduced-motion enabled
*/


@media screen and (prefers-reduced-motion: reduce) {
   html {
	   scroll-behavior: auto;
   }
}


/* Fonts, spacing and a little bit of colour. */

body {
    font-family: obviously-narrow, sans-serif;
    font-weight: 600;
    font-style: normal; }


.display {
	font-size: 109.67px;
	font-weight: 600;
	margin-bottom: 56px;
	margin-left: 8px;
}

.subtitle {
	font-family: obviously-narrow, sans-serif;
	font-size: 25.89px;
	font-weight: 400;
	text-align: right;
	margin:24px 12px 80px 32px;

}

h1{
	font-size: 67.78px;
	font-weight: 600;
	margin:32px 0 64px 8px;
}

h2 {
	font-size: 41.89px;
	font-weight: 600;
	margin:16px 8px 32px 8px;
}

h3 {
	font-size: 25.89px;
	font-weight: 600;
	margin:0 8px 0 8px;
}

h4 {
	font-size: 16px;
	font-weight: 600;
	margin-bottom: 8px;
}


p {
	font-size: 16px;
	font-family: obviously, sans-serif;
	font-weight: 400;
	margin: 24px 16px 16px 8px;
}

aside {
	font-size: 9.89px;
	font-weight: 400;
}

strong {
	color: #A63B51;
}

/*  `````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````                                   

				Header
	
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````*/
/* Makes the header a full page and organizes the content within. With 'space-between', the next page button is forced to the bottom of the page. The header-banner would be pushed to the top, if not for the large margin-top. */

header {
	height: 100vh;
	display:flex;
	flex-direction: column;
	justify-content: space-between;
	align-items: center;
}

/* This positions the header banner closer to the center on a PC. */

.header-banner {
	margin-top: 200px;
}

/* This prevents the arrow from being forced right down to the bottom. */
.next-screen {
	margin-bottom: 16px;
}

/* Grows the button press of the logo and the next page. */
.next-screen:active, .logo:active, .nav-links a:active {
	transform: scale(1.3, 1.3);
	/* This makes sure the phone doesn't show it's default blue highlight when a link is tapped. Found on: https://stackoverflow.com/questions/21003535/ */
	-webkit-tap-highlight-color: transparent;
}

/* Makes the icon black on either a hover or button press. */
.next-screen:hover svg #Icon_awesome-arrow-circle-right, .next-screen:active svg #Icon_awesome-arrow-circle-right{
	fill: #1f5673;
}

/* Due to the fixed header, this is required to make sure the next-screen anchor links to the correct place. */
#portfolio:target::before {
	content: "";
	display: block;
	height: 88px; /* fixed header height*/
	margin: -88px 0 0; /* negative fixed header height */
}

/* A fixed height doesn't work well on mobile devices, so this removes it. */
@media (hover:none) {
	
	header {
		height: unset;
	}

	/* The initial design makes it look like the next screen button will always appear near the bottom. Yet, it's very hard to tell where the next screen button will appear. */
	.next-screen {
		margin: 16px 0 64px;
	}
	/* This positions the header banner closer to the top on a mobile device, since there's less space to work with. */
	.header-banner {
		margin-top: 96px;
	}

}

/* 	---------- Mobile Nav---------- */

/* Nav from this responsive hamburger menu codepen: https://codepen.io/jo_Geek/pen/xgbaEr */

/* Formats the nav's fonts, and ensures it's kept at the top of the screen, with a white background. */

nav {
	
	font-size: 41.89px;
	font-weight: 400;
	position: fixed;
	width:100%;
	height: 88px;
	top:0;
	background-color: #fff;
	z-index: 10;
}

/* makes sure the top banner is positioned correctly. */

.nav {
	display: flex;
	justify-content: space-between;
	align-items: center;
	margin: 16px 8px 0 8px;
  }


  /* Puts the hamburger menu button in the right place. */

.nav > .nav-btn > label {
	display: inline-block;
	width: 48px;
	height: 40px;
  }


/* Makes the hamburger button red when hovered, or when the menu is open. */


.nav > .nav-btn > #menu-toggle:hover span, .nav  #nav-check:checked ~ .nav-btn > label > span {
	background-color: #A63B51;
  }

/* Keeps that hamburger button black when it's not pressed on mobile. */

#nav-check:not(:checked) ~ .nav-btn > label > span
  {
	  background-color: #000;
	  
  }

/* Makes that hamburger button larger when pressed, an indicator for mobile! */

.nav > .nav-btn > label:active span {
	transform: scale(1.3, 1.3);
	background-color: #A63B51;
	
}

  /* To make the menu visible via keyboard. From: http://www.ashleysheridan.co.uk/blog/Making+an+Accessible+Hamburger+Menu# */
  .menu-toggle:focus {
    outline: 2px solid #1f5673;
	padding: 5px;
	border-radius: 8px;

}

/* This is the hamburger button's formatting, that turns empty <span> tags into a good, old icon.  */
.nav > .nav-btn > label > span {
	display: block;
	width: 48px;
	height: 8px;
	margin-bottom: 8px;
	border-radius: 8px;
	background-color: #000;
  }

  /* This positions the mobile nav menu when it is told to animate out of it's hiding place. It's normally doesn't show because of 'height:0'. It shows when the checkbox is checked. */

.nav > .nav-links {	
	position: absolute;
	display: block;
	width: 100%;
	background-color: #fff;
	height: 0;
	overflow: hidden;
	top: 88px;
	left: 0;
	transition: all 0.2s ease-in-out;
	
  }

  /* This formats the links inside the mobile menu.  */
.nav > .nav-links > a {
	display: flex;
	flex-direction: column;
	width: 100%;
	color:#000;
  }
  
  /* This formats the links when hovering.  */

  .nav > .nav-links > a:hover, .nav > .nav-links > a:focus {
	  color:#A63B51;
  }

  /* This removes link styling, so the user knows when they're on the current page, there's no reason to navigate to the same location. */
  .nav > .nav-links > .current-page {
  text-decoration: none;
  cursor:default;
  }

  .nav > .nav-links > .current-page:hover, .nav > .nav-links > .current-page:focus {
	  color:#000;
  }

  /* Formats the contact link */

#contact {
	font-size: 25.89px;
	font-weight: 400;
	color:#A63B51;
}

/* Formats the contact link */

#contact:hover, #contact:focus, #contact:active  {
	color:#000;
}

#contact:active, 

	/* This is necessary, so when unchecked, the elements stay in the same place as it transitions. */
.nav > #nav-check:not(:checked) ~ .nav-links {
	display: flex;
	flex-direction: column;
	justify-content: space-around;
	align-items: center;
	text-align: center;
  }

  /* This forces the menu to expand when the hamburger button is clicked. It forces the height from 0 to 100vh and formats the options to be centred. */
.nav > #nav-check:checked ~ .nav-links {
	
	
	height: 100vh; /* This works fine for desktop browsers */
	overflow-y: hidden;
	display: flex;
	flex-direction: column;
	justify-content: space-around;
	align-items: center;
	text-align: center;
  }

  @media (hover:none) {
	/* As explained in HTML in the header, there is <script> there to provide the correct vh for mobile browsers. This is from: https://css-tricks.com/the-trick-to-viewport-units-on-mobile/ */
	.nav > #nav-check:checked ~ .nav-links {
	height: 100vh;/* Fallback for mobile browsers that do not support Custom Properties */
	height: calc(var(--vh, 1vh) * 100);
	}
  }


  /* This hides the secret weapon. The form field that is the actual reason why the nav menu moves in and out is hidden. This makes the hamburger button look like a button. It's meant to use only HTML and CSS button, without the javascript. Although, javascript was used to keep other things responsive. But hey, at least this doesn't! */
  .nav > #nav-check {
	display: none;
  }



/* ------ red-circle-navigation-selector-swirl -------- */

  /* This animates the red-circle-navigation-selector-swirl when the hamburger button is selected.  This idea is from: https://css-tricks.com/svg-line-animation-works/*/

  .nav > #nav-check:checked ~ .nav-links > a > svg > .b {
	animation: dash .25s linear .2s forwards;
  }

.b {
	stroke-dasharray: 1;
	stroke-dashoffset: 1;
	visibility: hidden;
}

@keyframes dash {
	from {
		stroke-dashoffset: 1;
		stroke: #ffffff00; 
	}
	to {
		stroke-dashoffset: 0;
		stroke: #a63b51;
		visibility: visible;
	}
}

/* This allows the anchor tag to control the position of the red-circle-navigation-selector-swirl, since it's set as position:absolute. */

.current-page {
	position: relative;
}

/* This forces the red-circle-navigation-selector-swirl to appear around the menu option. */

.selector {
	position: absolute;
	top: -50%;
	left: 10px;
	width:90%;
}

/* --- Portfolio list styling--- */

/* The moody section has it's own font color: */
.moody {
	color: #C62B70;
}

/* This aligns the arrow and image in the same line, forcing them apart on the screen. And it adds some spacing at the top. */
.preview {
	display: flex;
	justify-content: space-between;
	margin-top: 8px;
}

/* This makes the image faded normally, and provides some drop shadow. */
.preview img {
	opacity: .4;
	margin-left: 8px;
	box-shadow: 0 3px 6px #000;
	transition: all ease .5s;
}

/* Apparently transitions don't work on background gradients. SO, I found this solution that uses a pseudo-element: https://keithjgrant.com/posts/2017/07/transitioning-gradients/ */

.moody-pops {
	position:relative;
	z-index:1;
}

.moody-pops::before {
	position: absolute;
	content: "";
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
		/* Gradient created via a generator from: https://cssgradient.io/ */
	background: linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(198,43,112,.4) 51%, rgba(255,255,255,1) 100%);
	z-index: -1;
	transition: all ease .5s;
	opacity:0;
}

.preview:active {
		/* This makes sure the phone doesn't show it's default blue highlight when a link is tapped. Found on: https://stackoverflow.com/questions/21003535/ */
	-webkit-tap-highlight-color: transparent;
}

.moody-pops:active::before, .moody-pops:hover::before {

	opacity: 1;

}

/* This smooths the transiton back to the initial state. */

.moody-pops, .moody-pops path, 
.moody-pops .content-types {
	transition: all ease .5s;
}


/* This makes the image change when hovered, useful since it's within an anchor that will link to the next page. */
.moody-pops:active img, .moody-pops:hover img {
	opacity: 1;
	transition: all ease .5s;
}

/* Makes the arrow more pink when you hover over it. */
.moody-pops:hover path {
	fill: #C62B70;
	transition: all ease .5s;
}

/* Using this animation, I hope to show that the content-type icons are not buttons, that the user should instead tap/click the image or arrow. */

.moody-pops:hover .content-types {
	opacity: .4;
	transition: all ease .5s;
}

/* This aligns the arrow in the center of the vertical space created by the size of the image. It also aligns the button away from the right margin. */
.preview svg {
	align-self: center;
	margin-right: 32px;
}

/* This aligns the icons in the same line and keeps them away from the edges of the screen. It also overlaps the icons onto the previous section. */
.content-types {
	display:flex;
	justify-content: space-between;
	margin: -20px 24px 0 24px;
}

/* This centres the icon's text. */
.content-types h4{
	text-align: center;
}

/* In order to prevent the icons from overlapping the menu when it's opened, z-index is required. I was reminded that z-index only works on elements with the position tag by: https://stackoverflow.com/questions/2742488 . Position:relative is necessary to ensure the swirls are contained. */
.content-icon {
	position: relative;
	margin: 0 24px 80px;
	z-index: 1;

}

/* Makes the arrow grow when selecting it. This is the indicator for mobile. */
.next-page:active {
	transform: scale(1.3, 1.3);
}

/* This positions the swirl around the icons, to indicate the kind of content. */
.includes-this {
	position: absolute;
	top: -25px;
	left: -15px;
	width:150%;
	z-index: 1;
}

/* ----- Sections ----- */

section {
	margin-bottom: 80px;
}

.feature, .subsection {
	display:flex;
	flex-direction: column;
	justify-content: center;
}
.feature picture img, .subsection picture img {
	width:100%;
}

.halfimg, .subsection {
	align-items: center;
}

/* ---- Footer --- */

/* Gives the footer some vertical space */
footer {
	margin-top: 24px;
}

/* Styles the contact link so it fills the screen and remains centered. */
.biglink {
	font-size: 41.89px;
	color: #A63B51;
	font-weight: 400;
	text-decoration: none;
	display:block;
	text-align: center;
	margin-bottom: 16px;
}

.link {
	font-size: 25.89px;
	font-weight: 400;
	color: #A63B51;
	display:block;
	text-align: center;
}

/* Styles major links so they don't have the blue highlight color, and instead, makes them grow. */

.biglink:active, .link:active {
		/* This makes sure the phone doesn't show it's default blue highlight when a link is tapped. Found on: https://stackoverflow.com/questions/21003535/ */
		-webkit-tap-highlight-color: transparent;
		transform: scale(1.3, 1.3);
}

.go-top {
	display: flex;
	align-items: center;
	justify-content: end;
	margin: 32px 16px;
	text-decoration: unset;
	/* This makes sure the phone doesn't show it's default blue highlight when a link is tapped. Found on: https://stackoverflow.com/questions/21003535/ */
	-webkit-tap-highlight-color: transparent;
}

.go-top:active .top-btn {
	transform: scale(1.3, 1.3);

}

.top-btn:hover svg path {
	fill:#000;
}

.top-text {
	font-size: 25.83px;
	font-weight: 400;
	color:#1f5673;
	margin: 0 16px;
}

aside {
	text-align: center;
	margin-bottom: 24px;
}
/*  `````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````                                       

				Gettin' bigger
	
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````*/

@media only screen and (min-width: 768px) {



	.display {
		font-size: 177.45px;
		font-weight: 600;
	}

	.subtitle {
		font-size: 41.89px;
		font-weight: 400;
	}

	h1{
		font-size: 109.67px;
		font-weight: 600;
	}

	h2 {
		font-size: 67.78px;
		font-weight: 600;
	}

	h3 {
		font-size: 41.89px;
		font-weight: 600;
	}

	h4 {
		font-size: 16px;
		font-weight: 600;
	}

	nav {
		font-size: 41.89px;
	}

	.link {
		font-size: 41.89px;
		color: #A63B51;
		font-weight: 400;
	}

	p {
		font-size: 16px;
		font-family: obviously, sans-serif;
	}

	aside {
		font-size: 9.89px;
		font-weight: 400;
	}
}

@media only screen and (min-width: 1280px) {

	.nav > .nav-btn {
		display: none;
	  }
	  	  
	  .nav > .nav-links > a {
		display: inline-block;
		padding: 13px 10px 13px 10px;
		text-decoration: none;
		color: #efefef;
	  }
	  
	  .nav > .nav-links > a:hover {
		background-color: rgba(0, 0, 0, 0.3);
	  }


	.display {
		font-size: 287.11px;
		font-weight: 600;
	}

	.subtitle {
		font-size: 67.78px;
		font-weight: 400;
	}

	h1{
		font-size: 177.45px;
		font-weight: 600;
	}

	h2 {
		font-size: 109.67px;
		font-weight: 600;
	}

	h3 {
		font-size: 67.78px;
		font-weight: 600;
	}

	nav {
		font-size: 25.89px;
	}

	.link {
		font-size: 25.89px;
		color: #A63B51;
	}

	p {
		font-size: 16px;
		font-family: obviously, sans-serif;
	}

	aside {
		font-size: 9.89px;
		font-weight: 400;
	}
}


@media only screen and (min-width: 1920px) {
	.display {
		font-size: 430.61px;
		font-weight: 600;
	}

	.subtitle {
		font-size: 101.66px;
		font-weight: 400;
		
	}

	h1{
		font-size: 266.14px;
		font-weight: 600;
	}

	h2 {
		font-size: 200px;
		font-weight: 600;
	}

	h3 {
		font-size: 101.66px;
		font-weight: 600;
	}

	h4 {
		font-size: 62.83px;
		font-weight: 600;
	}

	h5, nav {
		font-size: 38.83px;
		font-weight: 400;
	}

	p {
		font-size: 24px;
		font-family: obviously, sans-serif;
	}

	aside {
		font-size: 14.83px;
		font-weight: 400;
	}
}